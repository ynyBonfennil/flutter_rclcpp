// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_rclcpp.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FlutterRclcppBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRclcppBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRclcppBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void create_node() {
    return _create_node();
  }

  late final _create_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('create_node');
  late final _create_node = _create_nodePtr.asFunction<void Function()>();

  void spin_some() {
    return _spin_some();
  }

  late final _spin_somePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('spin_some');
  late final _spin_some = _spin_somePtr.asFunction<void Function()>();

  void register_subscription_callback(
    MessageCallback callback,
  ) {
    return _register_subscription_callback(
      callback,
    );
  }

  late final _register_subscription_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MessageCallback)>>(
          'register_subscription_callback');
  late final _register_subscription_callback =
      _register_subscription_callbackPtr
          .asFunction<void Function(MessageCallback)>();
}

typedef MessageCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>;
