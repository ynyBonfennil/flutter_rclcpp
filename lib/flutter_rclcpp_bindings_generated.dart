// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_rclcpp.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FlutterRclcppBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRclcppBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRclcppBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void ros2_init() {
    return _ros2_init();
  }

  late final _ros2_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ros2_init');
  late final _ros2_init = _ros2_initPtr.asFunction<void Function()>();

  void ros2_create_node(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ros2_create_node(
      arg0,
    );
  }

  late final _ros2_create_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'ros2_create_node');
  late final _ros2_create_node =
      _ros2_create_nodePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void ros2_spin_some() {
    return _ros2_spin_some();
  }

  late final _ros2_spin_somePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ros2_spin_some');
  late final _ros2_spin_some = _ros2_spin_somePtr.asFunction<void Function()>();
}
